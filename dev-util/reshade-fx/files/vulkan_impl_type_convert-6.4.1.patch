--- a/source/vulkan/vulkan_impl_type_convert.hpp
+++ a/source/vulkan/vulkan_impl_type_convert.hpp
@@ -9,6 +9,21 @@
 #include <unordered_map>
 #include <limits>
 
+#define VK_NO_PROTOTYPES
+#include <vulkan/vulkan.h>
+#include <vk_mem_alloc.h>
+
+#include "reshade_api_pipeline.hpp"
+
+template <typename T>
+inline const T *find_in_structure_chain(const void *structure_chain, VkStructureType type)
+{
+        const T *next = reinterpret_cast<const T *>(structure_chain);
+        while (next != nullptr && next->sType != type)
+                next = reinterpret_cast<const T *>(next->pNext);
+        return next;
+}
+
 namespace reshade::vulkan
 {
 	static_assert(sizeof(VkBuffer) == sizeof(api::resource));
--- a/source/vulkan/vulkan_impl_type_convert.cpp
+++ b/source/vulkan/vulkan_impl_type_convert.cpp
@@ -3,8 +3,7 @@
  * SPDX-License-Identifier: BSD-3-Clause
  */
 
-#include "vulkan_hooks.hpp"
-#include "vulkan_impl_device.hpp"
+#include <cassert>
 #include "vulkan_impl_type_convert.hpp"
 #include <algorithm> // std::copy_n, std::fill_n, std::find_if
 
