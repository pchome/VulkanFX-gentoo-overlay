--- a/source/effect_expression.hpp
+++ b/source/effect_expression.hpp
@@ -6,6 +6,7 @@
 #pragma once
 
 #include "effect_token.hpp"
+#include <limits>
 
 namespace reshadefx
 {
--- a/source/effect_codegen_hlsl.cpp
+++ b/source/effect_codegen_hlsl.cpp
@@ -570,6 +570,7 @@ private:
 					s += std::signbit(data.as_float[i]) ? "1.#INF" : "-1.#INF";
 					break;
 				}
+				{
 				char temp[64];
 				const std::to_chars_result res = std::to_chars(temp, temp + sizeof(temp), data.as_float[i]
 #if !defined(_HAS_COMPLETE_CHARCONV) || _HAS_COMPLETE_CHARCONV
@@ -580,6 +581,7 @@ private:
 					s.append(temp, res.ptr);
 				else
 					assert(false);
+				}
 				break;
 			default:
 				assert(false);
@@ -1094,7 +1094,7 @@ private:
 				code += '[' + std::to_string(param.type.array_length) + ']';
 
 			if (!param.semantic.empty())
-				code += " : " + convert_semantic(param.semantic, std::max(1u, param.type.cols / 4) * std::max(1u, param.type.array_length));
+				code += " : " + convert_semantic(param.semantic, std::max(1u, uint32_t(param.type.cols / 4)) * std::max(1u, param.type.array_length));
 
 			if (i < num_params - 1)
 				code += ',';
--- a/source/effect_codegen_glsl.cpp
+++ b/source/effect_codegen_glsl.cpp
@@ -487,6 +487,7 @@ private:
 					s += std::signbit(data.as_float[i]) ? "1.0/0.0/*inf*/" : "-1.0/0.0/*-inf*/";
 					break;
 				}
+				{
 				char temp[64];
 				const std::to_chars_result res = std::to_chars(temp, temp + sizeof(temp), data.as_float[i]
 #if !defined(_HAS_COMPLETE_CHARCONV) || _HAS_COMPLETE_CHARCONV
@@ -497,6 +498,7 @@ private:
 					s.append(temp, res.ptr);
 				else
 					assert(false);
+				}
 				break;
 			default:
 				assert(false);
--- a/source/effect_parser_stmt.cpp
+++ b/source/effect_parser_stmt.cpp
@@ -7,6 +7,7 @@
 #include "effect_parser.hpp"
 #include "effect_codegen.hpp"
 #include <cctype> // std::toupper
+#include <limits>
 #include <cassert>
 #include <iterator> // std::back_inserter
 #include <algorithm> // std::max, std::replace, std::transform
